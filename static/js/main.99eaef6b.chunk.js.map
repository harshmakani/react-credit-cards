{"version":3,"sources":["utils.js","components/SupportedCards.js","App.js","serviceWorker.js","index.js"],"names":["clearNumber","arguments","length","undefined","replace","SupportedCards","classes","this","props","react_default","a","createElement","Typography_default","variant","className","topicTitle","containerRoot","Grid_default","container","spacing","item","xs","es","name","number","expiry","cvc","React","Component","withStyles","theme","textAlign","marginBottom","cardsList","display","marginTop","flexWrap","justifyContent","App","state","issuer","focused","numberError","nameError","expiryError","cvcError","formData","handleCallback","_ref","isValid","_this","setState","handleInputFocus","_ref2","target","handleInputChange","_ref3","retObj","inValue","error","value","Payment","fns","validateCardNumber","clearValue","formatCardNumber","formatCreditCardNumber","concat","slice","validateCardExpiry","formatExpirationDate","inIssuer","validateCardCVC","formatCVC","Object","defineProperty","handleSubmit","e","preventDefault","toConsumableArray","elements","filter","d","reduce","acc","form","reset","inData","_this2","_this$state","disableButton","key","root","appTitle","callback","creditCardForm","ref","c","onSubmit","TextField_default","fullWidth","type","label","required","autoFocus","autoComplete","onChange","onFocus","Button_default","color","disabled","creditCardDetails","keys","map","data","dataValue","dataKey","style","margin","components_SupportedCards","padding","flexGrow","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99eaef6b.chunk.js","sourcesContent":["import Payment from 'payment';\n\n/**\n * Replace all characters other than numbers\n * @param {*} inValue - Input value\n */\nfunction clearNumber(inValue = '') {\n    return inValue.replace(/\\D+/g, '');\n}\n\n/**\n * Format and validate credit card number\n * @param inValue - Input value\n */\nexport function formatCreditCardNumber(inValue) {\n    let retObj = {};\n\n    if (!inValue) {\n        retObj.error = true;\n        retObj.value = inValue;\n        return retObj;\n    }\n    \n    let valid = Payment.fns.validateCardNumber(inValue); // validate credit card number\n    if (!valid) {\n        retObj.error = true; \n    }\n\n    const clearValue = clearNumber(inValue); \n\n    retObj.value = Payment.fns.formatCardNumber(clearValue); // format credit card number\n\n    return retObj;\n}\n\n/**\n * Format and validate CVC\n * @param inValue - Input value\n * @param issuer - Type of credit card (amex, visa, etc.)\n */\nexport function formatCVC(inValue, inIssuer) {\n    let retObj = {};\n    const clearValue = clearNumber(inValue);\n    \n    const maxLength = 4; // max length of CVC (in our case amex=4)\n\n    let valid = Payment.fns.validateCardCVC(clearValue, inIssuer); // validate cvc\n    if (!valid || clearValue.length < 3) {\n        retObj.error = true;\n    }\n\n    retObj.value = clearValue.slice(0, maxLength); // input will be restricted to 4 digits\n    return retObj;\n}\n\n/**\n * Format and validate expiry date\n * @param inValue - Input value\n */\nexport function formatExpirationDate(inValue) {\n    let retObj = {};\n    const clearValue = clearNumber(inValue);\n    retObj.value = clearValue;\n\n    if (clearValue.length >= 3) {\n        retObj.value = `${clearValue.slice(0, 2)}/${clearValue.slice(2, 4)}`;\n\n        if (clearValue.length === 4) {\n            let valid = Payment.fns.validateCardExpiry(clearValue.slice(0, 2), clearValue.slice(2, 4)); // check if correct expiry date\n            if (!valid) {\n                retObj.error = true;\n            }\n        } else {\n            retObj.error = true;\n        }\n    } else {\n        retObj.error = true;\n    }\n    return retObj;\n}\n\n/**\n * Format the credit card submitted data\n * @param inData - Input data\n */\nexport function formatFormData(inData) {\n    return Object.keys(inData).map(data => `${data}: ${inData[data]}`);\n}\n","import React from 'react';\nimport Card from 'react-credit-cards';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = theme => ({\n    topicTitle: {\n        textAlign: 'center',\n        marginBottom: 15\n    },\n    cardsList: {\n        display: `flex`,\n        marginTop: 30,\n        flexWrap: `wrap`,\n        justifyContent: `space-between`\n    }\n});\nclass SupportedCards extends React.Component {\n    render() {\n        const { classes } = this.props;\n        return (\n            <div>\n                <Typography variant=\"h2\" className={classes.topicTitle} >Supported Cards</Typography>\n                <div className={classes.containerRoot}>\n                    <Grid container spacing={24}>\n                        <Grid item xs={6}>\n                            <Card\n                                name=\"Harsh Makani\"\n                                number=\"4111 1111 1111 1111\"\n                                expiry=\"10/20\"\n                                cvc=\"737\"\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Card\n                                name=\"Harsh Makani\"\n                                number=\"3700 0000 0000 002\"\n                                expiry=\"10/20\"\n                                cvc=\"737\"\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Card\n                                name=\"Harsh Makani\"\n                                number=\"5555 4444 3333 1111\"\n                                expiry=\"10/20\"\n                                cvc=\"737\"\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Card\n                                name=\"Harsh Makani\"\n                                number=\"3400 0000 0000 002\"\n                                expiry=\"10/20\"\n                                cvc=\"737\"\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Card\n                                name=\"Harsh Makani\"\n                                number=\"6011 6011 6011 6611\"\n                                expiry=\"10/20\"\n                                cvc=\"737\"\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Card\n                                name=\"Harsh Makani\"\n                                number=\"5066 9911 1111 1118\"\n                                expiry=\"10/20\"\n                                cvc=\"737\"\n                            />\n                        </Grid>                         \n                    </Grid>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(SupportedCards)\n","import React, { Component } from 'react';\nimport Card from 'react-credit-cards';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nimport {\n  formatCreditCardNumber,\n  formatCVC,\n  formatExpirationDate,\n  formatFormData,\n} from './utils';\n\nimport SupportedCards from './components/SupportedCards';\n\n// Card CSS\nimport 'react-credit-cards/es/styles-compiled.css';\n\nconst styles = theme => ({\n  root: {\n    padding: 30\n  },\n  containerRoot: {\n    flexGrow: 1\n  },\n  appTitle: {\n    textAlign: 'center',\n    marginBottom: 15\n  },\n  creditCardForm: {\n    margin: `30px auto 0`,\n    maxWidth: 400\n  },\n  creditCardDetails: {\n    margin: `15px auto 0`,\n    maxWidth: 400\n  }\n});\n\nclass App extends Component {\n  state = {\n    number: '',\n    name: '',\n    expiry: '',\n    cvc: '',\n    issuer: '',\n    focused: '',\n    numberError: false,\n    nameError: false,\n    expiryError: false,\n    cvcError: false,\n    formData: null,\n  };\n\n  handleCallback = ({ issuer }, isValid) => {\n    if (isValid) {\n      this.setState({ issuer });\n    }\n  };\n\n  /**\n   * Set Focused field to be highlighted in image\n   */\n  handleInputFocus = ({ target }) => {\n    this.setState({\n      focused: target.name,\n    });\n  };\n\n  /**\n   * Validation and setState on input data change\n   */\n  handleInputChange = ({ target }) => {\n    let retObj = {};\n    if (target.name === 'number') {\n      retObj = formatCreditCardNumber(target.value);\n      target.value = retObj.value; // input value\n\n      this.setState({ numberError: retObj.error }); // set error flag \n\n    } else if (target.name === 'expiry') {\n      retObj = formatExpirationDate(target.value);\n      target.value = retObj.value;\n\n      this.setState({ expiryError: retObj.error });\n    } else if (target.name === 'cvc') {\n      retObj = formatCVC(target.value, this.state.issuer);\n      target.value = retObj.value;\n\n      this.setState({ cvcError: retObj.error });\n    }\n\n    this.setState({ [target.name]: target.value }); // input value to display on image\n  };\n\n  /**\n   * Process and display data on submit\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n    const { issuer } = this.state;\n    const formData = [...e.target.elements]\n      .filter(d => d.name)\n      .reduce((acc, d) => {\n        acc[d.name] = d.value;\n        return acc;\n      }, {});\n\n    this.setState({ formData });\n    this.form.reset();\n  };\n\n  render() {\n    const { name, number, expiry, cvc, focused, issuer, formData, numberError, nameError, expiryError, cvcError } = this.state;\n    const { classes } = this.props;\n    let disableButton = true;\n\n    if(!numberError && !nameError && !expiryError && !cvcError && name !== '' && number !== '' && expiry !== '' && cvc !== '') {\n      disableButton = false;\n    }\n    return (\n      <div key=\"Payment\">\n        <div className={classes.root}>\n\n          <Typography variant=\"h2\" className={classes.appTitle}>Enter Credit Card Details</Typography>\n          <Card\n            number={number}\n            name={name}\n            expiry={expiry}\n            cvc={cvc}\n            focused={focused}\n            callback={this.handleCallback}\n          />\n          <form className={classes.creditCardForm} ref={c => (this.form = c)} onSubmit={this.handleSubmit}>\n            <div className={classes.containerRoot}>\n              <Grid container spacing={24}>\n                <Grid item xs={12}>\n                  <TextField\n                    variant=\"outlined\"\n                    fullWidth={true}\n                    type=\"tel\"\n                    name=\"number\"\n                    label=\"Card Number\"\n                    required\n                    autoFocus\n                    autoComplete={`off`}\n                    error={numberError}\n                    onChange={this.handleInputChange}\n                    onFocus={this.handleInputFocus}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    type=\"text\"\n                    fullWidth={true}\n                    variant=\"outlined\"\n                    name=\"name\"\n                    label=\"Name\"\n                    required\n                    autoComplete={`off`}\n                    error={nameError}\n                    onChange={this.handleInputChange}\n                    onFocus={this.handleInputFocus}\n                  />\n                </Grid>\n                <Grid item xs={6}>\n                  <TextField\n                    type=\"tel\"\n                    variant=\"outlined\"\n                    name=\"expiry\"\n                    label=\"MM/YY\"              \n                    required\n                    autoComplete={`off`}\n                    error={expiryError}\n                    onChange={this.handleInputChange}\n                    onFocus={this.handleInputFocus}\n                  />\n                </Grid>\n                <Grid item xs={6}>\n                  <TextField\n                    type=\"tel\"\n                    variant=\"outlined\"\n                    name=\"cvc\"\n                    label=\"CVC\"          \n                    required\n                    autoComplete={`off`}\n                    error={cvcError}\n                    onChange={this.handleInputChange}\n                    onFocus={this.handleInputFocus}\n                  />\n                </Grid>\n\n                <Grid item xs={12}>\n                  <input type=\"hidden\" name=\"issuer\" value={issuer} />\n                  <Button fullWidth={true} variant=\"contained\" type=\"submit\" color=\"primary\" disabled={disableButton} className={`btn btn-primary btn-block`}>\n                    PAY\n              </Button>\n                </Grid>\n              </Grid>\n            </div>\n          </form>\n          {formData && (\n            <div className={classes.creditCardDetails}>\n              {formatFormData(formData).map((dataValue, dataKey) => <div key={dataKey}>{dataValue}</div>)}\n            </div>\n          )}\n          <hr style={{ margin: '30px 0' }} />\n\n          {/* Displays list of rendered cards */}\n          <SupportedCards />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}